// From here https://codepen.io/P233/pen/AtzIw


// This following mixin is modified from the original Bourbon triangle add-on (https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_triangle.scss) in order to customise triangle shape and foreground / background colours, which can also create CSS ribbon incredibly easy.

// @include triangle($width $height, $foreground-color $background-color, $direction)
// $height and $background-color can be omitted, if so, $height will equal to $width and $background-color will be transparent.
// $direction contains the following arguments: up, down, left, right, up-right, up-left, down-right, down-left, inset-up, inset-down, inset-left, inset-right.

@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $foreground-color: nth($color, 1);
  $background-color: transparent !default;
  @if (length($color) == 2) {
    $background-color: nth($color, 2);
  }

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {

    $width: $width / 2;

    @if $direction == up {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-bottom: $height solid $foreground-color;

    } @else if $direction == right {
      border-top: $width solid $background-color;
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;

    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;

    } @else if $direction == left {
      border-top: $width solid $background-color;
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;

    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;

    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction == inset-up) {
    border-width: $height $width;
    border-style: solid;
    border-color: $background-color $background-color $foreground-color;
  }

  @else if ($direction == inset-down) {
    border-width: $height $width;
    border-style: solid;
    border-color: $foreground-color $background-color $background-color;
  }

  @else if ($direction == inset-right) {
    border-width: $width $height;
    border-style: solid;
    border-color: $background-color $background-color $background-color $foreground-color;
  }

  @else if ($direction == inset-left) {
    border-width: $width $height;
    border-style: solid;
    border-color: $background-color $foreground-color $background-color $background-color;
  }
}



$status-ribbon-top-width: 30px;
$status-ribbon-top-height: 40px;
$status-ribbon-top-tail-height: 5px;

%status-ribbon-top-base {
  display: inline-block;
  margin-right: $base-value;
  position: relative;
  width: $status-ribbon-top-width;
  height: $status-ribbon-top-width;
  top: -6px;
  text-align: center !important;
  span {
    position: relative;
    top: .3rem;
    font-size: 1.2rem;
    color: #fff;
    text-align: center !important;
    text-shadow: $shadow-text-dark;
  }

  &:before {
    content: "";
    position: absolute;
    right: -6px;
  }

  &:after {
    content: "";
    position: absolute;
    bottom: -$status-ribbon-top-tail-height;
    left: 0;
  }
}

@mixin status-ribbon-top-variant($color) {
  @extend %status-ribbon-top-base;
  background: $color;
  &:before {
    @include triangle(6px, darken($color, 15%), down-left);
  }
  &:after {
    @include triangle($status-ribbon-top-width $status-ribbon-top-tail-height, transparent $color, up);
    bottom: -$status-ribbon-top-tail-height;
  }

}

$status-ribbon-left-height: 40px;
$status-ribbon-left-tail-width: 15px;

%status-ribbon-left-base {
  display: inline-block;
  margin-right: $base-value;
  position: relative;
  height: $status-ribbon-left-height;
  width: 30px;
  left: -8px;
  line-height: $status-ribbon-left-height;
  span {
    position: relative;
    display: inline-block;
    width: 100%;
    font-size: 1.2rem;
    color: #fff;
    text-shadow: $shadow-text-dark;
    text-align: center;
  }
  &:before {
    top: -8px;
    left: 0px;
    content: "";
    position: absolute;
  }
  &:after {
    right: -$status-ribbon-left-tail-width;
    content: "";
    position: absolute;
  }
}

@mixin status-ribbon-left-variant($color) {
  @extend %status-ribbon-left-base;
  background: $color;
  &:before {
    @include triangle(8px, darken($color, 15%), down-right);
  }
  &:after {
    @include triangle($status-ribbon-left-height $status-ribbon-left-tail-width, $color, right);
  }
}

@each $status, $color in $statusColor {
  $shadow: $shadow-text-dark;

  @if $status ==  "neutral" or $status == "warning" {
    $shadow: $shadow-text-light;
  }

  .ribbon-top-#{$status} {
    @include status-ribbon-top-variant($color);
    background: control-gradient($color, map-get($statusColorHueShift, $status));
    span {
      color: map-get($statusTextColor, $status);
      text-shadow: $shadow;
    }
  }
  .ribbon-left-#{$status} {
    @include status-ribbon-left-variant($color);
    background: linear-gradient(to left, $color, map-get($statusColorHueShift, $status));
    span {
      color: map-get($statusTextColor, $status);
      text-shadow: $shadow;
    }
  }
}